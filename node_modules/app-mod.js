/**
 * Nuevas funciones y modificaciones. (Tadeo)
 */

var CHATS = [];
/**
 * Arreglo que almacena los usuarios conectados y los contactos que tiene.
 * uso: {chatId: {socketId:socket.id, flagTipoDeChat:tipoChat, participantes:{idUser:userId}}}
 * ejemplo, un usuario tiene tres ventanas abiertas de chat, así estaría cargado el objeto de chats:
 *  {
    "chatID1": {
        "socket": "idSocket",
        "flagTipoDeChat": "teamChat",
        "not-read" : "cantidad",
        "participantes": {
            "idUser1": "1234UserId",
            "idUser2": "1235UserId",
            "idUser3": "1236userId"
        }
    },
    "chatID2": {
        "socket": "idSocket",
        "flagTipoDeChat": "guildChat",
        "not-read" : "cantidad",
        "participantes": {
            "idUser1": "1234UserId",
            "idUser2": "1235UserId",
            "idUser3": "1236userId"
        }
    },
    "chatID3": {
        "socket": "idSocket",
        "flagTipoDeChat": "singleChat",
        "not-read" : "cantidad",
        "participantes": {
            "idUser1": "1234UserId"
        }
    }
}
 * @type {JSonArray}
 */
/**
 * Mensajero.
 * @param  {[type]} socket [description]
 * @return {[type]}        [description]
 */
function chatActions(socket){
	var self = this;

	//Agregar usuario a la lista de conectados.
	socket.on('adduser', function(username,email){
		console.log(username+email); //esto puede ser utilizado como idUser para formar el Json de objetos chats.
		//suponemos que no hay nadie conectado
		var creado = 0;
		 //verificamos que sea correcta la suposición
		 if (usernames.length != 0) {
			for (var f = 0; f < usernames.length; f++) { 	//recorro todos los usuarios anteriores
				if (usernames[f].socketId == socket.id) {	//verificamos si el cliente no ha creado una cuenta antes
					creado = 1; 							//si está creado lo indicamos para que no lo cree
					break;
				}
			}
		}
		if (!creado) {
			//Guardamos en el array de usuarios su nombre
			usernames.push({name: username, socketId:socket.id});
			//emitimos a los sockets avisando que hay nuevos usuarios para actualizar su lista
			//@to-do: debería enviar el aviso de usuario conectado únicamente a aquellos que estén en su lista de contactos.
			io.sockets.emit('updateusers',usernames,socket.id); 
		}
	});
	/*-----------------------------------------------------------------------------------------------------------------------*/
	socket.on('createRoom', function(room,friendname){
		self.checkIfExistRoom(room);
		self.joinRoom(room, friendname);
	});

	socket.on('createSingleChat', function(idUser, idFriend){
		self.checkIfExistDialog(idUser, idFriend);
		self.init1to1Chat(idUser, idFriend);
	});
	/*-----------------------------------------------------------------------------------------------------------------------*/
	socket.on('joinToRoom', function(username, room){
		//funcion para relacionar una room con un usuario
		self.joinRoom(room, username);
	});
	/*-----------------------------------------------------------------------------------------------------------------------*/
	//Esta funcion envia los mensajes del soporte y del usuario
	socket.on('sendchat', function (data,username,room) { //este código se ejecuta cada vez que algun cliente envía un chat
		socket.broadcast.emit('updatechat', username, data, room); 
		/* envio a todos los sockets execpto al que envió, un update chat
		luego en el cliente verifico si el chat corresponde a ese socket o no...*/
	});
	/*-----------------------------------------------------------------------------------------------------------------------*/
	socket.on('disconnect',function(){
		/* recorremos todos los usuario para eliminar el que se desconecto */
		if (usernames.length != 0) {
			for (var f = 0; f < usernames.length; f++) {
				 	//recorro todos los usuarios anteriores
				if (usernames[f].socketId == socket.id) { 	//verificamos si el cliente no ha creado una cuenta antes
					console.log("entra al segundo if");
					console.log("Se ha desconectado el cliente "+ usernames[f].name);
					socket.broadcast.emit('userremoved', usernames[f].name);
					socket.broadcast.emit('updateusers', usernames, socket.id);
					usernames.splice(f, 1);					//eliminamos del array de usuarios activos
				}else{
					console.log("Se ha intentado eliminar un cliente que no estaba conectado: "+ socket.id);
				}
			}
		}else{
			console.log("No quedan mas usuarios, este chat está muerto :/");
		}
	});

	/**
 	* Carga la lista de amigos del usuario.
 	* @param  {[type]} idUser
 	* @return {[type]}
 	*/
	this.loadUserFriends = function(idUser){

	}

	/**
 	* Carga los amigos en la lista (ó ventana de chat) que se asocien al team.
 	* Puede haber más de un team.
 	* @param  {[type]} idTeam
 	* @return {[type]}
 	*/
	this.loadTeamFriends = function(idTeam){

	}

	/**
 	* Carga los amigos en la lista (ó ventana de chat) relacionados a una guild.
 	* Pueden existir más de una guild.
 	* @param  {[type]} idGuild
 	* @return {[type]}
 	*/
	this.loadGuildFriends = function(idGuild){

	}

	/**
	 * Inicia chat entre el usuario y un contacto.
	 * Debe pasar por checkIfExistidUser, idFriend
	 * @param  {[type]} idUser
	 * @param  {[type]} idFriend
	 * @return {[type]}
	 */
	this.init1to1Chat = function(idUser, idFriend){

	}

	/**
	 * Pregunta si ya existe una conversación con ese contacto.
	 * Revisa en el objeto USERCHATS consultando por una socket ya abierta con el 
	 * contacto clickeado.
	 * @param  {[type]} idUser
	 * @param  {[type]} idFriend
	 * @return {[type]}
	 */
	this.checkIfExistDialog = function(idUser, idFriend){
		return  
	}
}